/*
<metadata description="Seaboard Block script for standalone config changes" target="Seaboard" tags="Default;MPE;MIDI;Melodic">
    <groups>
    </groups>
    <variables>
        <variable name="draw"    type="bool"   value="true" />
    </variables>
</metadata>

*/
/* DOCS
 Max X value(right): 58/10
 Max Z value(down): 30/10
 
 Config item max: 95, 64 and up are user values
 
 config 64 used as function layer (mode button pressed) indicator
 

/*
If pressing mode button, octave down enables "normal" midi operation, channel set by key before letting go of mode key (function key)
and octave up enables MPE mode
 
All changes in config sync between all blocks in the chain

Toggle MPE mode and channel 1 with mode key
Midi CC 80 on channel 1 sets midi channel. 0 = MPE
Midi CC 81 on channel 1 sets Piano Mode. 0 = Piano mode off, 1 = on (and turns expression on/off as well)
*/

const float octaveDownXloc = 0.0;
const float octaveDownYloc = 0.0;

const float octaveUpXloc = 5.75;
const float octaveUpYloc = 0.0;

const float octaveSwitchXSize = 0.3;
const float octaveSwitchYSize = 0.2;

// Max Y value for top row, min for bottom (grows from right left corner 0,0)

const float topRow = 0.39;
const float botRow = 2.46;

// upper X limits for key mapping THEY DO OVERLAP, SHARPS TO BE USED ONLY WITH EACH OTHER

const float C = 0.38;
const float CSharp = 0.59;
const float D = 0.81;
const float DSharp = 1.25;
const float E = 1.25;
const float F = 1.69;
const float FSharp = 2.07;
const float G = 2.12;
const float GSharp = 2.39;
const float A = 2.56;
const float ASharp = 2.96;

// Colours for mode button

const int blue = 0xff0000ff;
const int teal = 0xff00ffff;
const int yellow = 0xffffff00;
const int purple = 0xffff00ff;

//Default values for 5D

const int defaultVel = 37;
const int defaultLift = 127;

const int defaultGlide = 120;
const int defaultSlide = 62;
const int defaultPress = 87;

int  xPos;
int  presetIndex;
int  topOctaveShift;
int  clusterWidthLast;
bool settingsRequested;

// Config settings to sync


void initialise()
{
    
    setLocalConfigActiveState (0, true, true);
	setLocalConfigActiveState (1, true, true);
	setLocalConfigActiveState (2, true, true);
	setLocalConfigActiveState (3, true, true);
	setLocalConfigActiveState (4, true, true);
	setLocalConfigActiveState (5, true, false);
	setLocalConfigActiveState (6, true, true);
	setLocalConfigActiveState (7, true, true);
	setLocalConfigActiveState (10, true, true);
	setLocalConfigActiveState (11, true, true);
	setLocalConfigActiveState (12, true, true);
	setLocalConfigActiveState (13, true, true);
	setLocalConfigActiveState (14, true, true);
	setLocalConfigActiveState (15, true, true);
	setLocalConfigActiveState (16, true, true);
	setLocalConfigActiveState (17, true, true);
	setLocalConfigActiveState (18, true, true);
	setLocalConfigActiveState (30, true, true);
	setLocalConfigActiveState (31, true, true);
	setLocalConfigActiveState (32, true, true);
    setLocalConfigActiveState (64, true, false);
	
    setLocalConfigItemRange (4, -4, 6);
    setLocalConfigItemRange (64, 0, 1);
    
    setLocalConfig(64, 0);
    presetIndex = 0;
    topOctaveShift = 255;
    clusterWidthLast = 1;
    updateTopologyShift();
    settingsRequested = false;
}

void sendConfigItemToCluster (int itemId)
{
    if (getClusterWidth() < 2)
        return;
    
    int numBlocksInCluster = getNumBlocksInCurrentCluster();
    
    for (int i = 0; i < numBlocksInCluster; ++i)
        setRemoteConfig (getBlockIdForBlockInCluster(i), itemId, getLocalConfig (itemId));
}

void updateTopologyShift ()
{
    if (getClusterWidth() > 1)
    {
        int newTopOct = 0;

        int octStart = ((getClusterWidth() - 1) / 2);    
        newTopOct = (getClusterXpos() - octStart) * 2;
        
        if (topOctaveShift != newTopOct)
        {
            topOctaveShift = newTopOct;
            setLocalConfig (8, topOctaveShift);
        }
        if ((! getClusterXpos() && ! isMasterInCurrentCluster()) || (isMasterInCurrentCluster() && isMasterBlock()))
		{
			if (clusterWidthLast != getClusterWidth() || xPos != getClusterXpos())
			{
				clusterWidthLast = getClusterWidth();				
				sendConfigItemToCluster (4);
			}
		}
		xPos = getClusterXpos();
    }
    else if (topOctaveShift != 0)
    {
        topOctaveShift = 0;
        setLocalConfig (8, topOctaveShift);
    }
}

void repaint()
{
    updateTopologyShift();
    clearDisplay();
    
    if (! getBlockIDOnPort(0)) // if leftmost block light up key
    {
        if (getLocalConfig(2) == 1) //if MPE mode
        {
            fillPixel(teal, 0, 0);
            fillPixel(teal, 1, 0);
            
        }
        else if (getLocalConfig(17)== 1) // If Piano mode show Yellow
        {
            fillPixel(yellow, 0, 0);
            fillPixel(yellow, 1, 0);
        }
    }
    
}

void touchStart (int index, float x, float y, float z, float vz)
{
    int xi = int (x * 100);
    int yi = int (y * 100);
    //log(xi);
    //log(yi);
    
    // Handle octave switches
    if (x >= octaveDownXloc && x <= octaveDownXloc + octaveSwitchXSize && 
        y >= octaveDownYloc && y <= octaveDownYloc + octaveSwitchYSize)
    {
        // If pressing mode button, octave down enables "normal" midi operation, channel set by key before letting go of shift
        if (getLocalConfig(64) == 1)  
        {
            enablePianoMode(true);
            setChannelMode(1);
        }
        else if (getClusterWidth() > 1 && getClusterXpos() != 0)
        {
            // if not the leftmost block, ignore the octave down key
            handleTouchAsSeaboard (index);
              
        }
        else setLocalConfig(4, getLocalConfig (4) - 1);
    }
    else if (x >= octaveUpXloc && x <= octaveUpXloc + octaveSwitchXSize && 
             y >= octaveUpYloc && y <= octaveUpYloc + octaveSwitchYSize)
    {
        // octave up and mode button makes mpe mode
        if (getLocalConfig(64) == 1)
        {
            enablePianoMode(false);
            setChannelMode(0);
        }
         else if (getClusterWidth() > 1 && getClusterXpos() < getNumBlocksInCurrentCluster() - 1)
        {
            // if not the rightmost block, ignore octave up key
            handleTouchAsSeaboard (index);
              
        }
        else setLocalConfig(4, getLocalConfig (4) + 1);
    }
    // Handle midi channel choosing
    else if (getLocalConfig(64) == 1) // if mode key is pressed
    {       
       if (getLocalConfig(17)== 1)
       {
            if (x < C) setChannelMode(1);
            else if (x >= C && x < D) setChannelMode(2);
            else if (x >= D && x < E) setChannelMode(3);
            else if (x >= E && x < F) setChannelMode(4);
            else if (x >= F && x < G) setChannelMode(5);
            else if (x >= G && x < A) setChannelMode(6);
       }
       else if (getLocalConfig(2) == 1)
       {
           if (x < CSharp) 
           {
               log(getLocalConfig(10));
               log(yi);
               if (y > topRow)
                {   
                    int value = 127 - int (abs(map(y, 0.39, 3.0, 0.0 , 127.0)));
                    log(value);
                    setLocalConfig(10, value);
                }
               else if (y >= 0.0 && y < topRow)
                {
                    setLocalConfig(10, defaultVel);
                }
               
           }
           else if (x >= CSharp && x < DSharp)
           {
               log(getLocalConfig(14));
               log(yi);
               if (y > topRow)
                {   
                    int value = 127 - int (abs(map(y, 0.39, 3.0, 0.0 , 127.0)));
                    log(value);
                    setLocalConfig(14, value);
                }
               else if (y >= 0.0 && y < topRow)
                {
                    setLocalConfig(14, defaultLift);
                }
               
           }
           else if (x >= DSharp && x < FSharp)
           {
               log(getLocalConfig(11));
               log(yi);
               if (y > topRow)
                {   
                    int value = 127 - int (abs(map(y, 0.39, 3.0, 0.0 , 127.0)));
                    log(value);
                    setLocalConfig(11, value);
                }
               else if (y >= 0.0 && y < topRow)
                {
                    setLocalConfig(11, defaultGlide);
                }
               
           }
           else if (x >= FSharp && x < GSharp)
           {
               log(getLocalConfig(12));
               log(yi);
               if (y > topRow)
                {   
                    int value = 127 - int (abs(map(y, 0.39, 3.0, 0.0 , 127.0)));
                    log(value);
                    setLocalConfig(12, value);
                }
               else if (y >= 0.0 && y < topRow)
                {
                    setLocalConfig(12, defaultSlide);
                }
               
           }
           else if (x >= GSharp && x < ASharp){
               log(getLocalConfig(13));
               log(yi);
               if (y > topRow)
                {   
                    int value = 127 - int (abs(map(y, 0.39, 3.0, 0.0 , 127.0)));
                    log(value);
                    setLocalConfig(13, value);
                }
               else if (y >= 0.0 && y < topRow)
                {
                    setLocalConfig(13, defaultPress);
                }
               
           }
           syncAllBlocks();
       }
    }
    else
    {    
        // All other touches are treated as seaboard playing
        handleTouchAsSeaboard (index);
    }
}

void handleRequest (int id, int blockID)
{
    if (id == 0)    sendMessageToBlock (blockID, 0x783E, 0, getBlockIDForIndex (0));
}

void handleMessage (int data0, int data1, int data2)
{
    if (data0 == 0x783C)   handleRequest (data1, data2);   // Request message
}


void handleButtonDown (int index)
{
    if (index == 0) {
        // when mode button is pressed, enable function layer globally
        setLocalConfig(64,1);
        sendConfigItemToCluster(64);
        sendMIDI(0x7B);
    }
}

void handleButtonUp (int index)
{
    if (index == 0) {
        // When mode button is released, disable it
        setLocalConfig(64, 0);
        sendConfigItemToCluster(64);
    }
}

void setChannelMode(int midiChannel) {
    
    
    if (midiChannel == 0) {
        setLocalConfig(0, 2); // start channel
        setLocalConfig(1, 16); // end channel
        setLocalConfig(2, 1); // MPE on
        
    }
    else if (midiChannel > 0 && midiChannel <= 16) {
        setLocalConfig(0, midiChannel); // start channel
        setLocalConfig(1, midiChannel); // end channel
        setLocalConfig(2, 0); // MPE off

    }
    syncAllBlocks();
}

void enablePianoMode(bool enable) {
    if (enable) {
        setLocalConfig(17, 1); // Piano mode (i.e. slides trigger new notes)
        setLocalConfig(11, 0); // Glide sensitivity
        setLocalConfig(12, 0); // Slide sensitivity
        setLocalConfig(13, 0); // Pressure sensitivity
    }
    else {
        setLocalConfig(17, 0); // Normal mode
        setLocalConfig(11, 102); // Glide sensitivity
        setLocalConfig(12, 127); // Slide sensitivity
        setLocalConfig(13, 127); // Pressure sensitivity    
    }
    syncAllBlocks();
}

void syncAllBlocks() {
    
    // Updates every value except octave and some not set
    sendConfigItemToCluster (0);
    sendConfigItemToCluster (1);
    sendConfigItemToCluster (2);
    sendConfigItemToCluster (3);
    sendConfigItemToCluster (5);
    sendConfigItemToCluster (6);
    sendConfigItemToCluster (7);
    sendConfigItemToCluster (10);
    sendConfigItemToCluster (11);
    sendConfigItemToCluster (12);
    sendConfigItemToCluster (14);
    sendConfigItemToCluster (15);
    sendConfigItemToCluster (16);
    sendConfigItemToCluster (17);
    sendConfigItemToCluster (18);
    sendConfigItemToCluster (30);
    sendConfigItemToCluster (31);
    sendConfigItemToCluster (32); 
}
void syncBlockToMaster()
{
    if (getClusterWidth() < 2)
        return;
    
    int numBlocksInCluster = getNumBlocksInCurrentCluster();
    if (isMasterBlock())
    {
        syncAllBlocks();
    }     
    else if (isMasterInCurrentCluster())
    {
        int port = getPortToMaster();
        if (port != 0xff)
        {
            setLocalConfig( 0,int (requestRemoteConfig(getBlockIDOnPort(port), 0)));
        }

        
    }
}

void handleMIDI(int byte0, int byte1, int byte2) {
    // use CC #80 on midi channel 0 to set midi channel. Value 0 means MPE Mode
    int channel = (byte0 & 0xF) + 1;
    int command = byte0 >> 4;
    if (channel == 1 && command == 11) { // 11 = midi CC command
        if (byte1 == 80) {
            setChannelMode(byte2);
        }
        else if (byte1 == 81) {
            enablePianoMode(byte2 > 0 ? true : false);
        }
    }
}
